name: CI Guards (Delta 0014)

on:
  push:
    branches: [main, 'feature/**']
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  guards:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Install root dependencies
        run: npm install

      - name: Install frontend dependencies
        run: cd frontend && npm install

      - name: ESLint Path Guard
        id: eslint
        continue-on-error: true
        run: |
          cd frontend
          npm run lint > ../eslint.log 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      - name: Test Coverage Guard
        id: coverage
        continue-on-error: true
        run: |
          cd frontend
          npm run test:coverage > coverage.log 2>&1 || true

          # Extract coverage percentages from output
          LINES=$(grep -oP 'All files\s+\|\s+\K[\d.]+' coverage.log | head -1 || echo "0")
          BRANCHES=$(grep -oP 'All files\s+\|\s+[\d.]+\s+\|\s+\K[\d.]+' coverage.log | head -1 || echo "0")
          FUNCTIONS=$(grep -oP 'All files\s+\|\s+[\d.]+\s+\|\s+[\d.]+\s+\|\s+\K[\d.]+' coverage.log | head -1 || echo "0")
          STATEMENTS=$(grep -oP 'All files\s+\|\s+[\d.]+\s+\|\s+[\d.]+\s+\|\s+[\d.]+\s+\|\s+\K[\d.]+' coverage.log | head -1 || echo "0")

          # Thresholds
          LINES_THRESHOLD=80
          BRANCHES_THRESHOLD=75
          FUNCTIONS_THRESHOLD=80
          STATEMENTS_THRESHOLD=80

          # Check if all thresholds are met
          PASS=true
          [ $(echo "$LINES < $LINES_THRESHOLD" | bc -l) -eq 1 ] && PASS=false
          [ $(echo "$BRANCHES < $BRANCHES_THRESHOLD" | bc -l) -eq 1 ] && PASS=false
          [ $(echo "$FUNCTIONS < $FUNCTIONS_THRESHOLD" | bc -l) -eq 1 ] && PASS=false
          [ $(echo "$STATEMENTS < $STATEMENTS_THRESHOLD" | bc -l) -eq 1 ] && PASS=false

          echo "lines=$LINES" >> $GITHUB_OUTPUT
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
          echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT

          if [ "$PASS" = true ]; then
            echo "status=pass" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "status=fail" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Performance Budget Guard
        id: perf
        continue-on-error: true
        run: |
          cd frontend
          npm run test:perf > perf.log 2>&1 || true

          # Parse metrics
          METRIC=$(grep 'PERF_METRIC:' perf.log | cut -d= -f2 || echo "0")
          THRESHOLD=$(grep 'PERF_THRESHOLD:' perf.log | awk '{print $NF}' || echo "250")
          BASELINE=150

          # Calculate delta
          DELTA=$((METRIC - BASELINE))

          # Determine pass/fail
          if [ "$METRIC" -lt "$THRESHOLD" ]; then
            echo "status=pass" >> $GITHUB_OUTPUT
            echo "metric=$METRIC" >> $GITHUB_OUTPUT
            echo "threshold=$THRESHOLD" >> $GITHUB_OUTPUT
            echo "baseline=$BASELINE" >> $GITHUB_OUTPUT
            echo "delta=$DELTA" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "status=fail" >> $GITHUB_OUTPUT
            echo "metric=$METRIC" >> $GITHUB_OUTPUT
            echo "threshold=$THRESHOLD" >> $GITHUB_OUTPUT
            echo "baseline=$BASELINE" >> $GITHUB_OUTPUT
            echo "delta=$DELTA" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Spec Path Audit Guard
        id: audit
        continue-on-error: true
        run: |
          if npm run audit:specs > audit.log 2>&1; then
            echo "status=pass" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "status=fail" >> $GITHUB_OUTPUT
            cat audit.log
            exit 1
          fi

      - name: Post Summary
        if: always()
        run: |
          echo "## Delta 0014 — CI Guards" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # ESLint Guard Summary
          echo "### 🔍 ESLint Path Guard" >> $GITHUB_STEP_SUMMARY
          if [ -f eslint.log ]; then
            ERROR_COUNT=$(grep -c "error" eslint.log || echo "0")
            WARN_COUNT=$(grep -c "warning" eslint.log || echo "0")

            if [ "$ERROR_COUNT" -eq 0 ]; then
              echo "✅ **PASS** - No ESLint errors detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **FAIL** - $ERROR_COUNT error(s), $WARN_COUNT warning(s)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details><summary>Error Details (first 10)</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              grep "error" eslint.log | head -10 >> $GITHUB_STEP_SUMMARY || true
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **SKIPPED** - ESLint log not found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage Guard Summary
          echo "### 🧪 Test Coverage Guard" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.coverage.outputs.status }}" == "pass" ]; then
            echo "✅ **PASS** - All coverage thresholds met" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.coverage.outputs.status }}" == "fail" ]; then
            echo "❌ **FAIL** - Coverage below threshold" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **SKIPPED** - Coverage test did not run" >> $GITHUB_STEP_SUMMARY
          fi

          # Coverage metrics table
          if [ -n "${{ steps.coverage.outputs.lines }}" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Current | Threshold | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|---------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${{ steps.coverage.outputs.lines }}% | 80% | $([ $(echo '${{ steps.coverage.outputs.lines }} >= 80' | bc -l) -eq 1 ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${{ steps.coverage.outputs.branches }}% | 75% | $([ $(echo '${{ steps.coverage.outputs.branches }} >= 75' | bc -l) -eq 1 ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${{ steps.coverage.outputs.functions }}% | 80% | $([ $(echo '${{ steps.coverage.outputs.functions }} >= 80' | bc -l) -eq 1 ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${{ steps.coverage.outputs.statements }}% | 80% | $([ $(echo '${{ steps.coverage.outputs.statements }} >= 80' | bc -l) -eq 1 ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Performance Guard Summary
          echo "### ⚡ Performance Budget Guard" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.perf.outputs.status }}" == "pass" ]; then
            echo "✅ **PASS** - Extraction time within budget" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.perf.outputs.status }}" == "fail" ]; then
            echo "❌ **FAIL** - Extraction time exceeds threshold" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **SKIPPED** - Performance test did not run" >> $GITHUB_STEP_SUMMARY
          fi

          # Performance metrics table
          if [ -n "${{ steps.perf.outputs.metric }}" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Extraction Time | ${{ steps.perf.outputs.metric }}ms | $([ '${{ steps.perf.outputs.status }}' == 'pass' ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
            echo "| Threshold | ${{ steps.perf.outputs.threshold }}ms | - |" >> $GITHUB_STEP_SUMMARY
            echo "| Baseline | ${{ steps.perf.outputs.baseline }}ms | - |" >> $GITHUB_STEP_SUMMARY
            echo "| Delta | ${{ steps.perf.outputs.delta }}ms | $([ ${{ steps.perf.outputs.delta }} -le 0 ] && echo '✅ Better' || echo '⚠️ Slower') |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Spec Audit Guard Summary
          echo "### 📋 Spec Path Audit Guard" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.audit.outputs.status }}" == "pass" ]; then
            echo "✅ **PASS** - All spec paths valid" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.audit.outputs.status }}" == "fail" ]; then
            echo "❌ **FAIL** - Spec path mismatches detected" >> $GITHUB_STEP_SUMMARY
            if [ -f audit.log ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details><summary>Audit Details</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat audit.log >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **SKIPPED** - Audit script not configured" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Note: All guards are currently **informational** (continue-on-error: true). They won't block PR merges._" >> $GITHUB_STEP_SUMMARY
