# ==============================================================================
# CODERABBIT CONFIGURATION FOR PAYPLAN
# ==============================================================================
# Constitutional Code Review Enforcement
# Last Updated: 2025-10-29
# Constitution Version: 1.1
# Project: https://github.com/mmtuentertainment/PayPlan
# Configuration Expert: Manus AI (Master Expert Level)
#
# This configuration enforces PayPlan's constitutional principles through
# AI-powered code review. It is optimized based on analysis of 43+ real-world
# CodeRabbit configurations and official documentation.
#
# Key Improvements Over Previous Version:
# - Added AST-grep rules for constitutional enforcement
# - Enhanced path_instructions with specific code patterns
# - Integrated Code Graph Analysis for better context
# - Added Learnings scope configuration
# - Optimized tool integrations for financial app security
# - Added finishing touches for docstrings and code quality
# ==============================================================================

# yaml-language-server: $schema=https://coderabbit.ai/integrations/coderabbit-overrides.v2.json

# ==============================================================================
# LANGUAGE & TONE
# ==============================================================================
language: en-US

tone_instructions: |
  You are reviewing code for PayPlan, a privacy-first BNPL debt management app
  targeting 30 million Gen Z users (18-35) living paycheck-to-paycheck.
  
  **Your Role**: Constitutional Enforcer + Technical Advisor
  
  **Constitutional Enforcement (IMMUTABLE - BLOCK MERGE)**:
  1. Privacy-First (Principle I): localStorage-first, no tracking, PII sanitization
  2. Accessibility-First (Principle II): WCAG 2.1 AA, keyboard nav, screen readers
  3. Free Core (Principle III): BNPL features free forever, no paywalling
  
  **Phase 1 Requirements (REQUEST CHANGES)**:
  - Ship fast: 2-week sprints, 8 table-stakes features in 12 weeks
  - Manual testing only: NO automated tests required (defer to Phase 2)
  - User features > Infrastructure: Features must serve BNPL use case
  - YAGNI principle: Simple solutions, no over-engineering
  
  **Review Priorities (in order)**:
  1. üö´ BLOCK: Privacy violations (tracking, PII leaks, server-first)
  2. üö´ BLOCK: Accessibility failures (missing ARIA, contrast, keyboard nav)
  3. üö´ BLOCK: Paywalling core features (BNPL, categories, budgets, goals)
  4. ‚ö†Ô∏è REQUEST CHANGES: Infrastructure without user features
  5. ‚ö†Ô∏è REQUEST CHANGES: Automated tests in Phase 1 (defer to Phase 2)
  6. ‚ö†Ô∏è REQUEST CHANGES: Over-engineering or premature optimization
  7. üí° SUGGEST: Code quality improvements (TypeScript, Zod, naming)
  
  **Tone**: Constructive, educational, aligned with Phase 1 velocity goals.
  Celebrate wins, explain constitutional rationale, provide actionable fixes.

# ==============================================================================
# REVIEW SETTINGS
# ==============================================================================
reviews:
  # Review profile: "chill" for Phase 1 velocity, "assertive" for Phase 3+
  profile: chill  # Phase 1: Ship fast, manual testing only
  
  # High-level summary settings
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  poem: false  # Disable for professional tone
  review_status: true  # Show review completion status
  collapse_walkthrough: false  # Keep walkthrough visible for context
  
  # Auto-review configuration
  auto_review:
    enabled: true
    drafts: false  # Don't review draft PRs (save resources)
    base_branches:
      - main
      - develop  # Add if you use develop branch
    ignore_title_keywords:
      - "WIP"
      - "DO NOT MERGE"
      - "DRAFT"
      - "[skip ci]"
  
  # Request changes workflow: ONLY for IMMUTABLE principle violations
  request_changes_workflow: true
  
  # Path filters - exclude from review
  path_filters:
    # Dependencies
    - "!**/node_modules/**"
    - "!**/dist/**"
    - "!**/build/**"
    - "!**/.next/**"
    - "!**/.vercel/**"
    
    # Minified files
    - "!**/*.min.js"
    - "!**/*.min.css"
    - "!**/*.bundle.js"
    
    # Lock files
    - "!**/package-lock.json"
    - "!**/pnpm-lock.yaml"
    - "!**/yarn.lock"
    - "!**/Cargo.lock"
    
    # Assets
    - "!**/assets/**"
    - "!**/public/**"
    - "!**/*.png"
    - "!**/*.jpg"
    - "!**/*.jpeg"
    - "!**/*.gif"
    - "!**/*.svg"
    - "!**/*.ico"
    - "!**/*.woff"
    - "!**/*.woff2"
    - "!**/*.ttf"
    - "!**/*.eot"
    
    # Generated files
    - "!**/logs_result.json"
    - "!**/CHANGELOG.md"  # Auto-generated
    - "!**/.env.example"  # Template file
  
  # ===========================================================================
  # PATH-SPECIFIC REVIEW INSTRUCTIONS
  # ===========================================================================
  path_instructions:
    # -------------------------------------------------------------------------
    # CONSTITUTION (CRITICAL)
    # -------------------------------------------------------------------------
    - path: "memory/constitution.md"
      instructions: |
        **üö® CRITICAL: PROJECT CONSTITUTION**
        
        This is the single source of truth for all development decisions.
        Any changes to this file are EXTREMELY SENSITIVE.
        
        **IMMUTABLE Principles (I-III) CANNOT BE CHANGED**:
        - Principle I: Privacy-First Architecture
        - Principle II: Accessibility-First Development
        - Principle III: Free Core, Premium Optional
        
        **Required for ANY constitution changes**:
        1. ‚úÖ Written justification explaining why change is needed
        2. ‚úÖ Stakeholder approval (comment from @matthew-utt or HIL)
        3. ‚úÖ Version increment (e.g., v1.1 ‚Üí v1.2)
        4. ‚úÖ Update to "Last Amended" date
        5. ‚úÖ Update to "Version" field
        
        **BLOCK merge if**:
        - ‚ùå Modifying IMMUTABLE principles (I-III)
        - ‚ùå No written justification
        - ‚ùå No stakeholder approval comment
        - ‚ùå Version not incremented
        
        **REQUEST CHANGES if**:
        - ‚ö†Ô∏è Changing phased requirements without phase transition
        - ‚ö†Ô∏è Adding new principles without market context
        - ‚ö†Ô∏è Weakening existing requirements
    
    # -------------------------------------------------------------------------
    # FRONTEND CODE (CONSTITUTIONAL ENFORCEMENT)
    # -------------------------------------------------------------------------
    - path: "frontend/src/**/*.{ts,tsx}"
      instructions: |
        **Constitutional Review for Frontend Code**
        
        ## üö´ BLOCK MERGE IF VIOLATED (IMMUTABLE PRINCIPLES)
        
        ### 1. Privacy-First (Principle I)
        **Violations that BLOCK merge**:
        - ‚ùå `fetch()` or `axios` calls to external APIs without user consent
        - ‚ùå Third-party scripts (Google Analytics, Mixpanel, Hotjar, etc.)
        - ‚ùå `console.log()` with PII (names, emails, account numbers)
        - ‚ùå Server-side storage without explicit opt-in UI
        - ‚ùå Cookies or sessionStorage for core features (use localStorage)
        - ‚ùå Browser fingerprinting or tracking pixels
        
        **Required patterns**:
        - ‚úÖ localStorage-first: `localStorage.getItem('payplan_*')`
        - ‚úÖ PII sanitization before export: `sanitizePII(data)`
        - ‚úÖ Consent UI before server features: `<ConsentDialog />`
        
        **Code patterns to flag**:
        ```typescript
        // ‚ùå BLOCK: Tracking without consent
        gtag('event', 'page_view');
        analytics.track('user_action');
        
        // ‚ùå BLOCK: PII in logs
        console.log('User email:', user.email);
        
        // ‚ùå BLOCK: Server-first architecture
        const data = await fetch('/api/budgets'); // Should use localStorage
        
        // ‚úÖ APPROVE: localStorage-first
        const budgets = JSON.parse(localStorage.getItem('payplan_budgets_v1') || '[]');
        ```
        
        ### 2. Accessibility-First (Principle II)
        **Violations that BLOCK merge**:
        - ‚ùå `<div onClick={}>` without `role="button"` and keyboard handler
        - ‚ùå Missing `aria-label` on icon-only buttons
        - ‚ùå Color-only status indicators (must have text/icons too)
        - ‚ùå Missing focus indicators (`:focus-visible`)
        - ‚ùå Touch targets <44x44px
        - ‚ùå Missing `alt` text on informational images
        - ‚ùå Auto-playing animations without `prefers-reduced-motion` check
        
        **Required patterns**:
        - ‚úÖ Semantic HTML: `<button>`, `<nav>`, `<main>`, `<article>`
        - ‚úÖ ARIA labels: `aria-label`, `aria-describedby`, `aria-live`
        - ‚úÖ Keyboard navigation: `onKeyDown={(e) => e.key === 'Enter' && ...}`
        - ‚úÖ Focus management: `useRef()` + `focus()` after modal close
        - ‚úÖ Color contrast: 4.5:1 for text, 3:1 for UI components
        
        **Code patterns to flag**:
        ```typescript
        // ‚ùå BLOCK: Non-semantic button
        <div onClick={handleClick}>Click me</div>
        
        // ‚ùå BLOCK: Missing ARIA label
        <button><TrashIcon /></button>
        
        // ‚ùå BLOCK: Color-only status
        <div className="text-red-500">Overbudget</div>
        
        // ‚úÖ APPROVE: Accessible button
        <button 
          onClick={handleClick}
          onKeyDown={(e) => e.key === 'Enter' && handleClick()}
          aria-label="Delete budget"
        >
          <TrashIcon aria-hidden="true" />
        </button>
        
        // ‚úÖ APPROVE: Dual encoding (color + text + icon)
        <div className="text-red-500 flex items-center gap-2">
          <AlertIcon aria-hidden="true" />
          <span>Overbudget by $50</span>
        </div>
        ```
        
        ### 3. Free Core (Principle III)
        **Violations that BLOCK merge**:
        - ‚ùå Paywalling BNPL features (email parser, risk detection, payment tracking)
        - ‚ùå Paywalling spending categories, budgets, goals, dashboard
        - ‚ùå Paywalling recurring detection, bill reminders, cash flow, debt calculator
        - ‚ùå Requiring premium for CSV import/export
        
        **Allowed premium features**:
        - ‚úÖ Bank sync (Plaid integration)
        - ‚úÖ AI categorization
        - ‚úÖ Investment tracking
        - ‚úÖ Multi-user collaboration
        - ‚úÖ Unlimited archives (>50)
        
        **Code patterns to flag**:
        ```typescript
        // ‚ùå BLOCK: Paywalling core feature
        if (!user.isPremium) {
          return <PaywallModal feature="budgets" />;
        }
        
        // ‚úÖ APPROVE: Premium for advanced features
        if (!user.isPremium && budgets.length >= 10) {
          return <UpgradePrompt feature="unlimited_budgets" />;
        }
        ```
        
        ## ‚ö†Ô∏è REQUEST CHANGES IF VIOLATED (PHASE 1 REQUIREMENTS)
        
        ### 4. Ship Fast, Manual Testing Only
        - ‚ùå Adding `*.test.ts` or `*.spec.ts` files (defer to Phase 2)
        - ‚ùå Adding test coverage requirements (defer to Phase 3)
        - ‚ùå Adding performance optimization without user complaints (defer to Phase 4)
        - ‚ùå Infrastructure PRs without user features
        
        **Guidance**: "Tests are not required in Phase 1 (0-100 users). Focus on shipping
        features fast. Defer automated tests to Phase 2 (100-1,000 users). Manual testing
        is sufficient for now."
        
        ### 5. User Features > Infrastructure
        - ‚ùå CI/CD improvements without user features
        - ‚ùå Test infrastructure without user features
        - ‚ùå Performance monitoring without user features
        - ‚úÖ Features from roadmap (Tier 0, 1, 2)
        - ‚úÖ Bug fixes for user-reported issues
        
        ### 6. Simplicity & YAGNI
        - ‚ùå Over-engineering (building for hypothetical futures)
        - ‚ùå Feature bloat (adding features without user demand)
        - ‚ùå Premature optimization
        - ‚ùå Unnecessary dependencies
        
        ## üí° SUGGEST IMPROVEMENTS (CODE QUALITY)
        
        ### 7. TypeScript Standards
        - Strict mode enabled
        - No `any` types (use `unknown` and narrow)
        - Explicit return types on public functions
        - Zod validation for user inputs
        
        **Code patterns to suggest**:
        ```typescript
        // ‚ùå SUGGEST: Avoid `any`
        function processData(data: any) { ... }
        
        // ‚úÖ APPROVE: Use `unknown` and narrow
        function processData(data: unknown) {
          if (typeof data === 'object' && data !== null) {
            // Type narrowing
          }
        }
        
        // ‚ùå SUGGEST: Missing return type
        function calculateTotal(items) {
          return items.reduce((sum, item) => sum + item.price, 0);
        }
        
        // ‚úÖ APPROVE: Explicit return type
        function calculateTotal(items: Item[]): number {
          return items.reduce((sum, item) => sum + item.price, 0);
        }
        ```
        
        ### 8. React Standards
        - Functional components only
        - Custom hooks for reusable logic
        - Memoization for expensive computations (`useMemo`, `useCallback`)
        - Context for global state (no Redux unless needed)
        
        ### 9. Error Handling
        - User-friendly error messages
        - Error handling for all async operations
        - No `console.log` in production (use proper logging)
        
        ### 10. BNPL Focus
        - All features must serve BNPL debt management use case
        - No feature creep outside roadmap
        - Features must align with Tier 0, 1, or 2 roadmap
    
    # -------------------------------------------------------------------------
    # BUSINESS LOGIC (LIB DIRECTORY)
    # -------------------------------------------------------------------------
    - path: "frontend/src/lib/**/*.{ts,tsx}"
      instructions: |
        **Business Logic Review**
        
        **Privacy Requirements (BLOCK if violated)**:
        - ‚ùå PII in function parameters without sanitization
        - ‚ùå Data sent to server without consent check
        - ‚ùå localStorage keys without `payplan_` prefix
        
        **Required patterns**:
        - ‚úÖ PII sanitization: `sanitizePII()` before export/log
        - ‚úÖ localStorage-first: All storage uses `payplan_*_v1` keys
        - ‚úÖ Explicit consent: Server calls check `user.hasConsented`
        
        **Validation Requirements (SUGGEST)**:
        - Zod schemas for all user inputs
        - Type-safe validation (no `any`)
        - Clear error messages
        
        **Accessibility Requirements (BLOCK if violated)**:
        - Functions that generate UI must return accessible markup
        - Color-coded status must have text/icon alternatives
        
        **Phase 1 Requirements (REQUEST CHANGES)**:
        - Simple implementations (no premature optimization)
        - Manual testing sufficient (no automated tests required)
        - Focus on user value, not technical elegance
    
    # -------------------------------------------------------------------------
    # COMPONENTS (UI LAYER)
    # -------------------------------------------------------------------------
    - path: "frontend/src/components/**/*.{ts,tsx}"
      instructions: |
        **Component Review**
        
        **Accessibility (BLOCK merge if violated)**:
        - ‚ùå Missing keyboard navigation (Tab, Enter, Space, Escape)
        - ‚ùå Missing ARIA labels on buttons, inputs, links
        - ‚ùå Non-semantic HTML (divs instead of buttons)
        - ‚ùå Color contrast violations (use contrast checker)
        - ‚ùå Missing focus indicators
        - ‚ùå Touch targets <44x44px
        
        **Required patterns**:
        - ‚úÖ Semantic HTML: `<button>`, `<nav>`, `<main>`, `<article>`
        - ‚úÖ ARIA labels: `aria-label`, `aria-describedby`, `aria-live`
        - ‚úÖ Keyboard handlers: `onKeyDown`, `onKeyUp`, `onKeyPress`
        - ‚úÖ Focus management: `useRef()` + `focus()`
        - ‚úÖ Reduced motion: `prefers-reduced-motion` media query
        
        **Privacy (BLOCK if violated)**:
        - ‚ùå Analytics tracking in components
        - ‚ùå PII in console.log
        - ‚ùå Third-party scripts without consent
        
        **Phase 1 Requirements (REQUEST CHANGES)**:
        - Simple components (no over-engineering)
        - Manual testing sufficient
        - Responsive design (mobile-first)
        
        **Code Quality (SUGGEST)**:
        - Functional components only
        - Custom hooks for reusable logic
        - Memoization for expensive computations (`useMemo`, `useCallback`)
        - Props interface with JSDoc comments
    
    # -------------------------------------------------------------------------
    # SPECIFICATIONS (SPEC-KIT)
    # -------------------------------------------------------------------------
    - path: "specs/**/*.md"
      instructions: |
        **Specification Review (Spec-Kit Workflow)**
        
        **Constitutional Compliance (BLOCK if violated)**:
        - ‚ùå Feature violates IMMUTABLE principles (Privacy, Accessibility, Free Core)
        - ‚ùå Feature not aligned with roadmap (Tier 0, 1, or 2)
        - ‚ùå Inappropriate tier for complexity (Tier 0: <3 days, Tier 1: 3-7 days, Tier 2: 7-14 days)
        
        **Spec Quality (REQUEST CHANGES)**:
        - User stories clear and testable
        - Acceptance criteria measurable
        - Success criteria technology-agnostic
        - Edge cases identified
        - Accessibility considerations documented
        
        **Required sections in spec.md**:
        - Feature Name
        - User Stories (with acceptance criteria)
        - Functional Requirements
        - Success Criteria
        - Edge Cases
        - Out of Scope
        
        **Phase 1 Requirements (REQUEST CHANGES)**:
        - Spec focuses on user value, not technical implementation
        - No automated testing requirements in spec (Phase 1)
        - Manual testing notes included
    
    # -------------------------------------------------------------------------
    # TESTS (PHASE 2+ ONLY)
    # -------------------------------------------------------------------------
    - path: "tests/**/*.{ts,tsx,test.ts,spec.ts}"
      instructions: |
        **Test Review (Phase 2+ only)**
        
        **Phase 1 WARNING**:
        Tests are NOT required in Phase 1 (0-100 users). If tests are added in Phase 1,
        REQUEST CHANGES with this message:
        
        "Tests are not required in Phase 1 (0-100 users). Focus on shipping features fast
        with manual testing. Defer automated tests to Phase 2 (100-1,000 users). This PR
        should focus on user features, not test infrastructure."
        
        **Phase 2+ Requirements** (if we're in Phase 2+):
        - Critical path coverage (40%)
        - Accessibility tests (axe-core)
        - Regression tests for bug fixes
        - Clear test names describing scenarios
        - No flaky tests (tests must be deterministic)
    
    # -------------------------------------------------------------------------
    # CONFIGURATION FILES
    # -------------------------------------------------------------------------
    - path: "**/*.{json,yaml,yml,toml}"
      instructions: |
        **Configuration File Review**
        
        **Security (BLOCK if violated)**:
        - ‚ùå Hardcoded secrets, API keys, passwords
        - ‚ùå Exposed credentials in config files
        - ‚ùå Insecure defaults (e.g., `DEBUG=true` in production)
        
        **Best Practices (SUGGEST)**:
        - Use environment variables for secrets
        - Document required environment variables
        - Provide `.env.example` template
        - Validate config on startup
    
    # -------------------------------------------------------------------------
    # GITHUB WORKFLOWS
    # -------------------------------------------------------------------------
    - path: ".github/workflows/**/*.{yml,yaml}"
      instructions: |
        **GitHub Actions Workflow Review**
        
        **Security (BLOCK if violated)**:
        - ‚ùå Secrets in workflow files (use GitHub Secrets)
        - ‚ùå Untrusted third-party actions without version pinning
        - ‚ùå `pull_request_target` without proper safeguards
        
        **Best Practices (SUGGEST)**:
        - Pin action versions (e.g., `actions/checkout@v4`)
        - Use GitHub Secrets for sensitive data
        - Add workflow descriptions
        - Include failure notifications

# ==============================================================================
# TOOL INTEGRATIONS
# ==============================================================================
  tools:
    # JavaScript/TypeScript linting
    eslint:
      enabled: true
      config_file: "frontend/.eslintrc.cjs"
    
    # Security - Secret scanning (CRITICAL for financial app)
    gitleaks:
      enabled: true
      # Catches API keys, tokens, credentials, PII in commits
    
    # Security - Vulnerability detection (CRITICAL for financial app)
    semgrep:
      enabled: true
      # Detects security anti-patterns, injection risks, crypto issues
    
    # YAML validation
    yamllint:
      enabled: true
      # Validates GitHub Actions, CodeRabbit config, OpenAPI specs
    
    # Markdown style
    markdownlint:
      enabled: true
      config_file: ".markdownlint.json"
    
    # GitHub Actions validation
    actionlint:
      enabled: true
      # Validates GitHub Actions workflow syntax
    
    # Shell script validation
    shellcheck:
      enabled: true
      # Validates bash scripts in .github/workflows/scripts/
    
    # AST-based pattern matching (Pro plan)
    # Enable when you upgrade to Pro for constitutional enforcement
    ast-grep:
      enabled: false  # Enable when upgraded to Pro
      rule_dirs:
        - ".ast-grep/rules"
      # Custom rules for constitutional enforcement:
      # - Detect localStorage-first violations
      # - Detect missing ARIA labels
      # - Detect paywalled core features
      # - Detect PII in console.log

# ==============================================================================
# FINISHING TOUCHES
# ==============================================================================
  finishing_touches:
    # Docstring generation
    docstrings:
      enabled: true
      language: "English"
      style: "JSDoc"  # For JavaScript/TypeScript
      path_instructions:
        - path: "frontend/src/lib/**/*.{ts,tsx}"
          instructions: |
            Generate comprehensive JSDoc with:
            - @param with types and descriptions
            - @returns with type and description
            - @throws for error cases
            - @example for complex functions
            - @accessibility notes for UI-generating functions
            
            Example:
            ```typescript
            /**
             * Calculates the total amount spent in a category.
             * 
             * @param {Transaction[]} transactions - Array of transactions to analyze
             * @param {string} categoryId - ID of the category to filter by
             * @returns {number} Total amount spent in the category
             * @throws {Error} If transactions array is invalid
             * @example
             * const total = calculateCategoryTotal(transactions, 'groceries');
             * console.log(`Spent $${total} on groceries`);
             */
            ```
        
        - path: "frontend/src/components/**/*.{ts,tsx}"
          instructions: |
            Generate JSDoc for component props and functions:
            - Component description
            - @param for each prop with type and description
            - @accessibility notes for keyboard navigation and ARIA
            
            Example:
            ```typescript
            /**
             * Budget progress bar component with accessible WCAG 2.1 AA compliance.
             * 
             * @param {Object} props - Component props
             * @param {number} props.spent - Amount spent so far
             * @param {number} props.budget - Total budget amount
             * @param {string} props.category - Category name
             * @accessibility
             * - Uses React Aria useProgressBar for ARIA attributes
             * - Keyboard accessible (Tab to focus, Enter to view details)
             * - Screen reader announces "Spent $X of $Y budget for Z"
             * - Color contrast 3:1 minimum (WCAG 2.1 AA)
             */
            ```
    
    # Unit test generation (Phase 2+ only)
    unit_tests:
      enabled: false  # Phase 1: Manual testing only
      # Enable in Phase 2 (100-1,000 users)

# ==============================================================================
# CHAT SETTINGS
# ==============================================================================
chat:
  # Auto-reply to user questions in PRs
  auto_reply: true

# ==============================================================================
# KNOWLEDGE BASE
# ==============================================================================
knowledge_base:
  # Learn from code reviews and discussions
  opt_out: false
  
  # Data retention (required for Learnings feature)
  data_retention: true
  
  # Enable web search for external context
  web_search:
    enabled: true
  
  # Learnings scope
  learnings:
    scope: auto  # auto = global for private repos, local for public repos
  
  # Issue tracking integration
  issues:
    scope: auto
  
  # Pull request context
  pull_requests:
    scope: auto
  
  # Code guidelines (reads CLAUDE.md, .copilot/, etc.)
  code_guidelines:
    enabled: true
    paths:
      - "memory/constitution.md"
      - "CLAUDE.md"
      - ".copilot/**"
      - ".cursor/**"
      - ".windsurf/**"

# ==============================================================================
# EARLY ACCESS & EXPERIMENTAL
# ==============================================================================
early_access: false  # Stable features only for production app

# ==============================================================================
# ADDITIONAL SETTINGS
# ==============================================================================

# Ignore draft PRs
ignore_draft_pr: true

# ==============================================================================
# PAYPLAN CONSTITUTIONAL RULES (REFERENCE)
# ==============================================================================
#
# These are custom guidelines that CodeRabbit MUST enforce through path_instructions.
# This section is for human reference only (CodeRabbit reads path_instructions above).
#
# **IMMUTABLE PRINCIPLES (BLOCK MERGE IF VIOLATED)**:
#
# 1. PRIVACY-FIRST (Principle I)
#    - ‚ùå BLOCK: User data collection without explicit consent
#    - ‚ùå BLOCK: Third-party trackers or analytics without opt-in
#    - ‚ùå BLOCK: Server-side storage without explicit opt-in
#    - ‚ùå BLOCK: PII in logs, telemetry, or exports without sanitization
#    - ‚úÖ REQUIRE: localStorage-first architecture
#    - ‚úÖ REQUIRE: PII sanitization before export
#    - ‚úÖ REQUIRE: Explicit consent for server features
#
# 2. ACCESSIBILITY-FIRST (Principle II)
#    - ‚ùå BLOCK: Missing keyboard navigation (Tab, Enter, Space, Escape)
#    - ‚ùå BLOCK: Missing ARIA labels on interactive elements
#    - ‚ùå BLOCK: Color contrast violations (text <4.5:1, UI <3:1)
#    - ‚ùå BLOCK: Color-only information (must have text/icons too)
#    - ‚ùå BLOCK: Missing focus indicators
#    - ‚ùå BLOCK: Touch targets <44x44px
#    - ‚úÖ REQUIRE: WCAG 2.1 AA compliance
#    - ‚úÖ REQUIRE: Semantic HTML (`<button>`, `<nav>`, `<main>`, `<article>`)
#    - ‚úÖ REQUIRE: Screen reader compatibility
#    - ‚úÖ REQUIRE: Reduced motion support (`prefers-reduced-motion`)
#
# 3. FREE CORE (Principle III)
#    - ‚ùå BLOCK: Paywalling BNPL management features
#    - ‚ùå BLOCK: Paywalling spending categories, budgets, goals, dashboard
#    - ‚ùå BLOCK: Paywalling recurring detection, bill reminders, cash flow, debt calculator
#    - ‚úÖ ALLOW: Premium features (bank sync, AI categorization, investments, multi-user)
#
# **PHASE 1 REQUIREMENTS (REQUEST CHANGES IF VIOLATED)**:
#
# 4. SHIP FAST, MANUAL TESTING ONLY
#    - ‚ùå REQUEST CHANGES: Adding automated tests (defer to Phase 2)
#    - ‚ùå REQUEST CHANGES: Adding test coverage requirements (defer to Phase 3)
#    - ‚ùå REQUEST CHANGES: Adding performance optimization (defer to Phase 4)
#    - ‚ùå REQUEST CHANGES: Infrastructure without user features
#    - ‚úÖ APPROVE: User-facing features with manual testing notes
#    - ‚úÖ APPROVE: Simple solutions (YAGNI principle)
#    - ‚úÖ APPROVE: Shipping features fast (2-week sprints)
#
# 5. USER FEATURES > INFRASTRUCTURE
#    - ‚ùå REQUEST CHANGES: CI/CD improvements without user features
#    - ‚ùå REQUEST CHANGES: Test infrastructure without user features
#    - ‚ùå REQUEST CHANGES: Performance monitoring without user features
#    - ‚úÖ APPROVE: Features from roadmap (Tier 0, 1, 2)
#    - ‚úÖ APPROVE: Bug fixes for user-reported issues
#
# 6. SIMPLICITY & YAGNI (Principle VII)
#    - ‚ùå REQUEST CHANGES: Over-engineering (building for hypothetical futures)
#    - ‚ùå REQUEST CHANGES: Feature bloat (adding features without user demand)
#    - ‚ùå REQUEST CHANGES: Premature optimization
#    - ‚ùå REQUEST CHANGES: Unnecessary dependencies
#    - ‚úÖ APPROVE: Small features (<2 weeks)
#    - ‚úÖ APPROVE: Incremental delivery
#    - ‚úÖ APPROVE: Clear purpose for every feature
#
# **CONFLICT RESOLUTION HIERARCHY**:
#
# When principles conflict, use this hierarchy:
# 1. IMMUTABLE Principles (Privacy, Accessibility, Free Core) - HIGHEST PRIORITY
# 2. Phase Requirements (Phase 1: Ship fast, manual testing)
# 3. Product Principles (Visual-First, Mobile-First, Simplicity)
# 4. Quality Principles (Phased by user count)
#
# Example:
# - "Should we add analytics?" ‚Üí NO (Privacy-First > Product insights)
# - "Should we write tests?" ‚Üí NO (Phase 1: Manual testing only)
# - "Should we optimize this chart?" ‚Üí ONLY IF users complain (Phase 1: Velocity > Performance)
