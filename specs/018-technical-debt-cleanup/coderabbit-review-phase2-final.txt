Starting CodeRabbit review in plain text mode...

Connecting to review service
Setting up
Analyzing
Reviewing

============================================================================
File: CODERABBIT_LINT_REVIEW.md.bak
Line: 44 to 45
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_LINT_REVIEW.md.bak around lines 44-45 and 54-60, there are placeholder entries marked "(empty prompt)" that must be resolved; either remove those list items or replace each with a concise description of the finding and the recommended fix (one sentence per item) so the report is actionable ‚Äî update plan.types.ts:97-115 and PaymentContext.context.ts:8-9 entries with short issue summaries and remediation steps or delete the empty lines, and apply the same treatment to all empty prompts between lines 54‚Äì60.



============================================================================
File: CODERABBIT_LINT_REVIEW.md.bak
Line: 80
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_LINT_REVIEW.md.bak around line 80 (and note also line 104), the idempotency TTL is currently set to 60s which is far too short for BNPL payments; change the TTL to at least 24 hours (or a longer value appropriate for your risk model), update the documentation to mark this as a P0 blocking fix that must be merged before any payment-processing release, and add a short note stating the storage backend (e.g., Redis TTL or DB retention) and any financial/accuracy assumptions that justify the chosen TTL.



============================================================================
File: CODERABBIT_LINT_REVIEW.md.bak
Line: 6 to 12
Type: refactor_suggestion

Prompt for AI Agent:
In CODERABBIT_LINT_REVIEW.md.bak around lines 6 to 12 (and apply same change to lines 16 to 28), the document inconsistently mixes severity labels in the "Issue Breakdown by Severity" table with concern-based categories in "Issues by Category"; pick a single taxonomy (prefer using concern-based/security/privacy/quality for this payment app), update the table header and row labels to match those concern categories, adjust or remap the counts/percentages to correspond to the new categories, and add a short clarifying note at the top of the Issues by Category section explaining the taxonomy so both sections use identical terminology and counts.



============================================================================
File: CODERABBIT_LINT_REVIEW.md.bak
Line: 90 to 104
Type: nitpick

Prompt for AI Agent:
In CODERABBIT_LINT_REVIEW.md.bak around lines 90‚Äì104, the Recommended Action Plan lacks a documented testing scope, rollback plan, and verification cadence for P0 security/privacy fixes; update this section to (1) enumerate test coverage required for each P0 item (unit tests for JSON.parse validation and timezone parsing, integration or E2E tests for PII cache handling and error sanitization, plus CI gating), (2) define an explicit rollback strategy (steps to revert the change, desired fallback behavior such as fail-closed or graceful degradation per component, how to invalidate caches/keys, and how to route traffic), and (3) state verification cadence and ownership (who signs off pre-merge, who runs post-deploy smoke tests, monitoring/alert criteria, and required approvals) so reviewers and ops can follow a repeatable compliance-ready process.



============================================================================
File: backend/src/lib/validation/IdempotencySchemas.js
Line: 20 to 24
Type: refactor_suggestion

Prompt for AI Agent:
In backend/src/lib/validation/IdempotencySchemas.js around lines 20-24 and 38-43, the SHA-256 hex regex is duplicated; extract it into a single constant at the top of the file (e.g., const SHA256_HEX_REGEX = /^[0-9a-fA-F]{64}$/) and replace the inline regex literals in both IdempotencyCacheKeySchema and IdempotencyCacheEntrySchema with that constant, keeping the existing validation error message intact; ensure the constant is used everywhere the hash pattern is validated in this file and export it only if other modules need to reference it.



============================================================================
File: CODERABBIT_LINT_REVIEW.md.bak
Line: 64 to 80
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_LINT_REVIEW.md.bak around lines 64 to 80, the P0‚ÄìP2 list uses ‚úÖ but the earlier "Issues by Category" section (lines ~14‚Äì60) has no status markers, causing ambiguity; add a short legend at the top of the document explaining the status symbols (e.g., ‚úÖ Fixed, ‚è≥ Pending, üîÑ In Progress) and then update every item in the "Issues by Category" section (lines 14‚Äì60) to include the appropriate status icon that matches the P0‚ÄìP2 summary, ensuring symbols and wording are consistent across both sections and that security/privacy items have explicit status entries for auditability.



============================================================================
File: backend/src/lib/validation/IdempotencySchemas.js
Line: 42
Type: refactor_suggestion

Prompt for AI Agent:
In backend/src/lib/validation/IdempotencySchemas.js around lines 42 and 48, the schema currently hardcodes ttl: 86400000 while a DEFAULT_TTL constant also exists, so replace the literal with the DEFAULT_TTL constant to avoid drift; to do this either move the DEFAULT_TTL declaration above the schema or move the schema below the constant (or use a forward reference pattern) and update the schema line to use DEFAULT_TTL as the default value.



============================================================================
File: backend/src/lib/validation/IdempotencySchemas.js
Line: 62 to 70
Type: nitpick

Prompt for AI Agent:
In backend/src/lib/validation/IdempotencySchemas.js around lines 62-70, the validateCacheEntry function currently throws a generic Error and thus discards Zod's validation details; change it to preserve and propagate Zod error information by either (A) throwing a custom error class (e.g., CacheEntryValidationError) that accepts the Zod error and exposes its .errors/details, or (B) include the Zod error information in the thrown Error message/object (for example attach result.error or result.error.errors to the thrown error), then update callers/logging to surface that details for observability; ensure the new error class sets a clear name, message, and a property containing the Zod validation details.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 164 to 167
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 164 to 167, the review notes navigator.doNotTrack is untyped and may be string|null|undefined; update the nav type alias to explicitly include doNotTrack: string | null | undefined, then update any usages to guard/read it accordingly (e.g., check for null/undefined or coerce to string) and add the change to spec.md under "Browser API Integration".



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 182 to 185
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 182 to 185, the entry notes the 'sm' button variant is under the WCAG 44px minimum; update the button 'sm' variant height to h-11 (44px) in button.constants.ts (lines ~24‚Äì26) so its rendered height meets the 44px requirement, and update any related CSS/utility classes or tokens that reference the old size; also add a short note in the global accessibility requirements section indicating the 'sm' variant now conforms to the 44px minimum so documentation/tests reflect the change.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 108 to 111
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 108 to 111: the timezone field is inconsistently named (timezone vs timeZone); update plan.types.ts (lines ~120-125) and any related types/schemas to use timeZone (camelCase) everywhere, then add this requirement to spec.md under "Field Naming". Fixes: rename the field in TypeScript interfaces/types, update serialization/deserialization keys and JSON schemas, adjust DB column mappings or migrations and API request/response contracts, update unit/integration tests, and add a small compatibility layer or migration step to map incoming legacy timezone values to timeZone to avoid breaking clients.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 51 to 54
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 51 to 54, the note flags Date.parse timezone dependency in csvExport.ts lines 63-68; fix by replacing any Date.parse usage with deterministic UTC parsing: accept/validate an ISO8601 date string, enforce presence of a timezone (or append "Z" to treat as UTC), parse into year/month/day/hour/minute/second integers and construct the Date with Date.UTC(...) (or use new Date(dateStringWithZ) after validation), reject or normalize invalid formats, update csvExport.ts to validate inputs and use the UTC-based Date creation, add the change to spec.md under "Date Handling" describing required ISO/UTC format and validation, and add/adjust unit tests to cover timezone edge cases and invalid inputs.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 46 to 49
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 46‚Äì49, the comment flags missing business rules for negative amounts emitted by csvExport.ts; update the code to validate negative payment amounts (detect amounts < 0), require and validate an explicit reason/type field (refund, credit_memo, chargeback) and associated metadata (audit id or original_txn_id), then either reject the row with a clear error or handle it according to the type (reverse booking for refunds, reconciliation flow for credit memos, processor coordination for chargebacks) and ensure it is logged/audited; also add a short spec entry in spec.md under "Data Validation" that documents allowed negative amount types, required metadata fields, expected behaviors, and add unit tests covering each negative-amount case.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 142 to 144
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 142 to 144, the note warns that idempotency.types.ts (lines ~16-22) accepts arbitrarily deep JSON which can be abused for DoS; add a max-depth validation (suggest max 10) to the Zod schema used for idempotency payloads: implement a small recursive depth-check helper or a Zod preprocess/refine that walks the value and rejects when nesting >10, wire that validator into the existing schema so deeply-nested payloads are rejected early, and add/update unit tests to cover depth >10 and edge cases.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 194 to 197
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 194 to 197, replace the unsafe type assertions at InputCard.tsx lines 199, 259, 284 with runtime validation: introduce a Zod (or equivalent) schema for the expected input shape and call schema.safeParse() (or validator) on incoming data, check the result and handle failures (return early, show user error, or fallback) instead of using as, and only use the typed value after safeParse succeeds; also update spec.md under "Input Validation" to document the schema and error-handling behavior.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 80 to 83
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 80 to 83, the note flags that raw error.message values are being returned to clients (MMT-22); update the implementation (e.g., plan.ts lines ~287-294) to stop leaking internal error messages by returning a generic client-facing error like "Request processing failed" and ensure the original error is logged server-side with full details (stack and context) for debugging; make sure to centralize this behavior in the error-handling middleware or utility so all endpoints use the generic message and sensitive details are never included in client responses.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 70 to 73
Type: potential_issue

Prompt for AI Agent:
In CODERABBIT_ISSUE_MAPPING.md.bak around lines 70 to 73 (and in the referenced plan.ts at lines 214-224), parseFloat is used without validating the result which can produce NaN or Infinity in payment calculations; update the plan.ts numeric parsing to run Number.isFinite(parsedValue) after parseFloat/Number conversion and throw a descriptive error (e.g., "Invalid numeric value for : ") when validation fails, ensure callers handle the thrown error, and add the rule to spec.md under "Numeric Processing" noting the requirement to validate finiteness and fail fast on invalid inputs.



============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 38 to 40
Type: potential_issue




============================================================================
File: CODERABBIT_ISSUE_MAPPING.md.bak
Line: 149 to 151
Type: potential_issue

Prompt for AI Agent:
In idempotency.types.ts around lines 49‚Äì53 (referenced in CODERABBIT_ISSUE_MAPPING.md.bak), the idempotency cache currently may store raw request/response payloads containing PII; implement a sanitization layer that runs before any data is written to the idempotency store: identify/whitelist allowed non-PII fields, remove or redact known PII fields (names, emails, account numbers, SSNs) or replace them with irreversible hashes, ensure nested structures are traversed, and centralize this sanitizer so all cache-write paths call it; additionally enforce retention/deletion metadata (TTL and secure purge) and add unit tests to validate sanitization and that no raw PII lands in the store.



============================================================================
File: backend/tests/unit/ErrorSanitizer.test.ts
Line: 103 to 138
Type: refactor_suggestion

Prompt for AI Agent:
In backend/tests/unit/ErrorSanitizer.test.ts around lines 103 to 138, expand the financial-data test to cover BNPL-sensitive fields by adding extra keys to context.additionalData (e.g., bankAccountNumber, routingNumber, ssn, taxId, creditScore, incomeVerification, loanAmount, loanTerms, collectionStatus) and assert that the serverLog keeps non-sensitive numeric/summary fields but redacts all sensitive values to '[REDACTED]' while the clientMessage contains only the generic message and does not include any of the sensitive keys or values; update assertions to check each new sensitive field is redacted in sanitized.serverLog.context.additionalData and that sanitized.clientMessage neither contains the keys nor their values.



============================================================================
File: backend/tests/unit/ErrorSanitizer.test.ts
Line: 270 to 289
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/ErrorSanitizer.test.ts around lines 270 to 289, add a unit test that verifies sanitize handles circular references in the options.additionalData without throwing (create an Error, build an object whose property points to itself, pass it as additionalData to errorSanitizer.sanitize with the same requestId/endpoint/method pattern used in existing tests, and assert the returned sanitized.clientMessage equals 'An error occurred. Please try again.' and that sanitized.serverLog (and optionally sanitized.serverLog.additionalData) is defined), ensuring the test fails if JSON serialization of additionalData would crash the sanitizer.



============================================================================
File: backend/tests/unit/ErrorSanitizer.test.ts
Line: 1 to 307
Type: refactor_suggestion

Prompt for AI Agent:
In backend/tests/unit/ErrorSanitizer.test.ts lines 1-307: the test suite lacks runtime schema validation of errorSanitizer outputs; add Zod (v4.1.11) based assertions to ensure the sanitized object shape doesn't regress. Create a Zod schema that requires clientMessage as string, serverLog as object with timestamp (ISO 8601 string), error object containing message (string), name (string), and stack (string | undefined), and context as optional object with requestId, userId, endpoint, method (strings) and optional additionalData (object with known fields); import zod and validate the sanitized result in a new test (or extend existing tests) by parsing sanitized and asserting parse succeeds, and add a small negative test to ensure invalid shapes fail parsing so CI will catch breaking changes.



============================================================================
File: backend/tests/unit/IdempotencySchemas.test.ts
Line: 135 to 149
Type: potential_issue

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 135 to 149, the test currently accepts a 10-year TTL but the schema lacks an upper bound; update the IdempotencyCacheEntrySchema (where defined) to enforce a max TTL (e.g., 90 days in milliseconds) for the ttl field and then change this test to use a value >90 days (e.g., 91 days) and assert that safeParse returns success === false and that the parse error contains an issue for the ttl path so the test verifies the schema rejects excessively large TTLs.



============================================================================
File: backend/tests/integration/idempotency.test.ts
Line: 18 to 28
Type: potential_issue




============================================================================
File: backend/tests/unit/ErrorSanitizer.test.ts
Line: 140 to 161
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/ErrorSanitizer.test.ts around lines 140 to 161, add a concise comment above the timestamp assertions stating that server log timestamps must be in UTC (ISO 8601 with 'Z') because UTC is mandatory for server logs to avoid timezone-related issues in payment scheduling, due dates, auditing and compliance; keep the comment short, place it immediately before the regex/assertions that check the 'Z' suffix, and do not change the test assertions themselves.



============================================================================
File: backend/src/lib/security/ErrorSanitizer.js
Line: 88 to 95
Type: potential_issue

Prompt for AI Agent:
In backend/src/lib/security/ErrorSanitizer.js around lines 88 to 95, the SAFE_KEYS branch only recurses into nested plain objects and ignores arrays, so sensitive fields inside arrays (e.g., [{cardNumber:...}]) aren't redacted; update the logic to detect arrays and recursively sanitize each array element (mapping over the array and calling sanitizeAdditionalData for object elements, leaving primitives intact), while preserving the existing behavior for plain objects and non-object values.



============================================================================
File: backend/tests/unit/IdempotencySchemas.test.ts
Line: 186 to 234
Type: refactor_suggestion

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 186 to 234, strengthen the IdempotencyCacheKeySchema tests by adding cases that reject whitespace-only and leading/trailing whitespace for operation and resourceId, reject strings containing dangerous characters/patterns (e.g., SQL injection tokens like "';--", path traversal like "../"), enforce length bounds (operation max ~100, resourceId max ~255) with tests for excessively long values, and verify missing required fields are rejected; for each case call IdempotencyCacheKeySchema.safeParse(...) and assert result.success is false.



============================================================================
File: backend/tests/integration/idempotency.test.ts
Line: 16 to 97
Type: potential_issue

Prompt for AI Agent:
In backend/tests/integration/idempotency.test.ts around lines 16 to 97, the file contains placeholders and is missing two critical test suites (T023 and T024) plus proper lifecycle cache isolation; add a new describe('T023: Idempotency key security') with tests that validate idempotency keys are UUIDs using the project's uuid v13.0.0 validator and a test that ensures duplicate keys from different user/accounts are rejected (simulate two accounts and assert no cross-account replay), add describe('T024: Concurrent request handling') with tests that simulate simultaneous requests using the same idempotency key to assert the system prevents race-condition double-processing and a rapid-retry test that sends repeated requests within milliseconds to ensure graceful handling, and implement beforeEach/afterEach hooks to initialize/reset the cache or mocks (e.g., recreate in-memory cache, jest.clearAllMocks/reset modules) so tests run in isolation.



============================================================================
File: backend/tests/unit/IdempotencySchemas.test.ts
Line: 151 to 168
Type: potential_issue

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 151 to 168, the test currently expects passthrough to allow arbitrary extra fields which the reviewer flagged as a security/compatibility risk; update the schema and tests to either (A) lock down the schema by switching the IdempotencyCacheEntrySchema to .strict() and remove/assert that unknown fields are rejected in tests, or (B) explicitly enumerate permissible extra fields (e.g., allow metadata via z.record(z.unknown()).optional() and any other known extras) and then update this test to assert only those allowed extras are preserved (and that unknown fields are rejected); ensure tests reflect the chosen approach (rejecting arbitrary extras or permitting only listed keys) and adjust assertions accordingly.



============================================================================
File: backend/tests/unit/IdempotencySchemas.test.ts
Line: 61 to 85
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 61 to 85, add a test that asserts the schema rejects timestamps set in the future: create an invalidEntry with the same shape (hash of 64 chars, result={}, ttl=86400000) but set timestamp to Date.now() + 86400000 (24 hours ahead), call IdempotencyCacheEntrySchema.safeParse(invalidEntry) and expect result.success toBe(false); place this test alongside the existing negative and non-integer timestamp tests.



============================================================================
File: backend/tests/integration/idempotency.test.ts
Line: 69 to 89
Type: potential_issue

Prompt for AI Agent:
In backend/tests/integration/idempotency.test.ts around lines 69-89, the placeholder tests must be replaced with timezone-agnostic TTL validation tests: add a test that asserts the idempotency TTL uses UTC epoch (Date.now()) by mocking/stubbing Date.now() and verifying stored timestamps and TTL comparisons use milliseconds since epoch and the TTL constant 86400000; add a DST transition test by using fake timers to advance time across a DST boundary (simulate forward/back one hour shifts) and assert entries still expire after 86400000ms based on epoch ms, not local clock changes; add a clock-skew test by simulating small server time differences (advance/retard Date.now() on one side) and ensure duplicate prevention still holds within 24h window and retries succeed after epoch-based expiry; for each test also verify expired entries are cleaned up and assertions compare against the TTL constant rather than local date math.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 23 to 25
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 23 to 25, the entry referencing CODERABBIT_LINT_REVIEW.md.bak lines 90‚Äì104 is missing a "Prompt for AI Agent" and is non-actionable; either add a concise, specific refactor prompt (e.g., state the code area, the desired refactor outcome, constraints, and example expected changes) so the AI can perform the refactor, or delete the entire entry to avoid ambiguity in the review document.



============================================================================
File: backend/tests/unit/ErrorSanitizer.test.ts
Line: 9 to 10
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/ErrorSanitizer.test.ts around lines 9 to 10, replace the CommonJS requires with ES6 imports to leverage TypeScript typing and IDE support: import the Jest globals using import { describe, it, expect } from '@jest/globals'; and import the module under test using import { errorSanitizer } from '../../src/lib/security/ErrorSanitizer'; (ensuring the exported symbol names match), then update any usages if necessary to match the imported names.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 143 to 148
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around CODERABBIT_ISSUE_MAPPING.md.bak lines 51‚Äì54, the "Type: potential_issue" entry is missing a "Prompt for AI Agent" and is non-actionable; either remove this empty entry or replace it with a concrete prompt that states the AI task, expected input and output formats, any constraints, and one short example (e.g., goal: map issue to codeowner, input: issue id + title, output: YAML with owner and priority). Ensure the prompt is specific and actionable so the agent can perform the mapping without additional clarification.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 272 to 275
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 272 to 275, the IdempotencySchemas.js entry (lines 61‚Äì69) has an empty "Prompt for AI Agent" making it non-actionable; either fill that prompt with a concise, specific instruction for the AI (e.g., goal, inputs, desired output format, and constraints) targeted to reviewing/fixing IdempotencySchemas.js, or delete the entry entirely so the file contains only actionable items.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 288 to 293
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 288 to 293 (referring to IdempotencySchemas.test.ts lines 122‚Äì170), the entry is missing a "Prompt for AI Agent" and is non-actionable; either add a clear, specific prompt describing the expected task for the AI (e.g., summarize the test, suggest fixes, generate missing test cases, and include input/output expectations and constraints) or remove the entire entry so the file contains only actionable items.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 31 to 32
Type: nitpick

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 31 to 32, the report header lacks reproducibility metadata and the error-messaging guidance is too generic; update the header to include ESLint version, config file/path used, the exact command or npm/yarn script to regenerate the report (one-line example), and a ‚Äúreport validity‚Äù note with generated-at timestamp and whether it was run on CI or locally (or needs re-validation), and revise the guidance at lines ~175‚Äì176 to explicitly state: avoid exposing payment processor states, declined reason codes, gateway identifiers, PII or echoed amounts, or any details that could leak decision logic or enable account enumeration in BNPL/payment flows.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 348 to 351
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 348 to 351, the ErrorSanitizer.ts entry (lines 43‚Äì51) is missing a "Prompt for AI Agent" and is non-actionable; either add a clear, specific AI prompt that describes the desired change (e.g., what to sanitize, example inputs/outputs, desired code style, and acceptance criteria) or remove the entire entry if it provides no value‚Äîupdate the file to include the chosen prompt text or delete the empty section so the review is actionable.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 58 to 60
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 58 to 60, the CODERABBIT_ISSUE_MAPPING.md.bak entry for lines 28‚Äì31 is missing a "Prompt for AI Agent" and therefore non-actionable; either add a concise, specific prompt that tells the AI what to produce (e.g., desired output format, constraints, input context, and acceptance criteria) for that potential_issue, or remove the entire entry if it is not needed; ensure the added prompt is actionable, one or two sentences max, clearly linked to the issue description, and follows the repository's prompt conventions.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 309 to 310
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 1 to 172, several failing-case tests currently only assert result.success is false; update each failing-case test (invalid hash length, negative timestamp, non-integer timestamp, empty operation, empty resourceId, invalid key hash) to, inside the existing if (!result.success) guard, also assert result.error.issues.length is > 0, assert the specific issue.path equals the expected field (e.g., ['hash'], ['timestamp'], ['operation'], ['resourceId']), and assert the issue message or code contains the expected hint (e.g., message includes '64' or 'hex' for hash, includes 'integer' or 'nonnegative' for timestamp, includes 'required' or 'nonempty' for strings); keep assertions inside the TypeScript success-check guard so types narrow correctly and provide clear, actionable failure messages.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 50 to 52
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 50 to 52, the CODERABBIT_ISSUE_MAPPING.md.bak entry (lines 1‚Äì3) is missing a "Prompt for AI Agent" and is non-actionable; either remove that empty entry or replace it with a concise prompt that states the goal, the expected input format, the exact output format, and any constraints (e.g., "Goal: map issue IDs to maintainers; Input: YAML list of issues; Output: JSON mapping issue_id->assignee; Constraints: include only active repos, max 1 assignee per issue"), so the section becomes actionable for an AI agent.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 329 to 330
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 106 to 119, add unit tests that (1) construct an IdempotencyCacheEntry with a ~1MB serialized result and assert safeParse accepts it (or update schema to allow up to 1MB if not), (2) construct a ~2MB serialized result and assert safeParse fails with a size-rejection (map to a 413-equivalent failure in validation), and (3) simulate logging via the project logger wrapper to assert that PII fields in result (at minimum: amount, customerId, paymentToken) are redacted/omitted from the logged output; to support these tests, update the IdempotencyCacheEntrySchema to validate a max serialized size of 1_048_576 bytes and implement or enhance the logger/storage masking to redact those fields before logging or storing, then assert masking behavior in the tests.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 137 to 138
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 137‚Äì138, the idempotency TTL is hardcoded to 60 seconds which is too short for BNPL/payment flows; change it to a configurable setting driven by an environment/config value (e.g., IDEMPOTENCY_TTL_SECONDS or IDEMPOTENCY_TTL with sensible default) with the default set to at least 246060 seconds, update any constant or config locations that still define 60s, add a short comment referencing payment processor requirements (24h+), ensure all cache/data-store code uses the new config value when setting expirations, add/update unit/integration tests that assert the effective TTL >= 24 hours and that per-idempotency-key behavior is enforced (or document if TTL is global), add handling/notes for clock skew/out-of-order clocks (use server monotonic/time-source and tolerant comparisons) and log/alert when an expired key is reused, and update deployment docs to instruct teams to validate TTL against the payment provider SLA before shipping.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 185 to 186
Type: nitpick

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 185-186, add a prompt amendment that requires csvExport.ts to never include raw customer payment methods, PII, or unencrypted amounts in plain-text exports; implement field-level redaction or encryption for sensitive columns, enforce field-level schema constraints in csvExport.ts (types, lengths, ranges, formats) alongside the negative-amount business rules, ensure exported files are encrypted at rest and transmitted over TLS, redact or mask sensitive fields in logs and development environments, and update spec.md "Input Validation" to document these protection requirements and the chosen redaction/encryption strategy.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 253 to 254
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 71 to 85, add three new it(...) blocks that mirror the existing test style to validate TTL edge cases: create and safeParse entries with ttl set to a negative value, ttl = 0, and an excessively large value (e.g., 10 years in ms) and assert result.success is false for each; also add a single-line comment near these tests: "TTL must be a positive integer. Minimum 24h (86400000 ms) recommended for payment operations." Ensure tests use the same schema helper/setup as adjacent tests and only assert rejection (no schema changes).



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 67 to 68
Type: nitpick

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 67‚Äì68, the spec currently asks to "define explicit negative-amount semantics" but lacks concrete rules and examples; update spec.md under "Data Validation" to enumerate allowed negative-amount cases (refund/reversal, chargeback, data-entry error), require that refunds/reversals include original transaction IDs and constraints (e.g., cannot exceed original captured amount), specify flows where negatives are rejected (e.g., initial auth), include example CSV rows for valid/invalid refunds and chargebacks and the required downstream GL/reconciliation mappings (account codes, debit/credit treatment, balance adjustments), and note required reference fields for compliance; then modify csvExport.ts (around the referenced lines) to validate negative amounts against this new spec: detect negatives, require and validate reference IDs, classify as refund vs chargeback vs invalid, enforce amount <= original when applicable, emit a structured validation error or log and reject/flag rows per rule, add unit tests covering each case (valid refund with reference, chargeback path, missing reference flagged, amount exceeding original flagged), and update changelog/docs to reflect the new validation behavior.



============================================================================
File: backend/tests/integration/idempotency.test.ts
Line: 11
Type: nitpick

Prompt for AI Agent:
In backend/tests/integration/idempotency.test.ts around line 11, replace the CommonJS require with an ES6 import: change the const require line to use an import statement (e.g. import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';) so the file uses TypeScript/ESM syntax; ensure the file has a top-level import (no const) and that the project tsconfig supports ES module imports (esModuleInterop or module set appropriately) if necessary.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 215 to 216
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 215‚Äì216: additionalData is currently passed unsanitized and risks PII/payment leakage ‚Äî implement a recursive sanitizer that traverses objects and arrays and replaces values for a deny-list of sensitive keys (cardNumber, cardCVV, cvv, ssn, socialSecurityNumber, bankAccount, routingNumber, accountNumber, paymentToken, fullName, dob, address, email, etc.) with a standard placeholder like "[REDACTED]"; at the same time enforce an allowlist of safe top-level metadata keys and drop or redact any keys not explicitly allowed, applying the same rules recursively for nested objects/array items; add a Zod schema (or equivalent runtime validator) that enforces the allowlist shape for additionalData so callers fail fast at type/validation time; emit audit-log entries (separate audit trail) recording which keys were redacted and caller/context info (without including the redacted values) for security review; and add a brief JSDoc above the sanitizer stating callers must not include raw PII/payment data in additionalData and listing the prohibited fields and behavior (redaction + audit) so usage is documented.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 263 to 264
Type: potential_issue

Prompt for AI Agent:
In backend/tests/unit/ErrorSanitizer.test.ts around lines 226 to 237, the test title "should handle non-Error objects" doesn't match the test body which uses new Error('String error'); either (A) rename the test title to "should handle Error objects" to match the current assertion, or (B) change the test to supply actual non-Error inputs (e.g., "string error", { message: "obj error" }, null) and update the expected sanitized.serverLog and clientMessage assertions to reflect how errorSanitizer normalizes non-Error values (coerce to string or provide a default message), then run the tests to confirm behavior.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 243 to 247
Type: potential_issue

Prompt for AI Agent:
In specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt around lines 243 to 247, the IdempotencySchemas.js entry (Type: potential_issue) is missing a "Prompt for AI Agent" and is non-actionable; either add a concise, specific AI prompt that describes the exact expected change or test (e.g., reproduce the issue, propose schema fixes, or verify idempotency behavior) with acceptance criteria, inputs and desired outputs, or remove the entire entry if no follow-up is needed so the file contains only actionable items.



============================================================================
File: backend/tests/integration/idempotency.test.ts
Line: 52 to 67
Type: potential_issue

Prompt for AI Agent:
In backend/tests/integration/idempotency.test.ts around lines 52-67, the placeholder tests for "Cache validation failure triggers fail-closed" are missing coverage for preventing duplicate payments, returning an actionable error to the client, and logging the failure for observability; replace the placeholders with integration tests that (1) stub/mock the cache validation to throw an error, (2) assert the payment API/client call is NOT invoked (spy on the payment service), (3) assert the HTTP response to the client contains an error status/body (not a silent success), and (4) assert the app logger/monitoring hook is called with the validation error so failures are recorded. Ensure proper setup/teardown of mocks and use the existing test helpers/request utilities consistent with other idempotency tests.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 319 to 320
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 45‚Äì69, add two unit tests that mirror existing valid-entry shape (same valid hash, result, ttl) but (1) construct an entry with a far-future timestamp (e.g., Date.now() + 3652460601000) and assert IdempotencyCacheEntrySchema.safeParse(...) fails, and (2) construct an entry with a timestamp overflow (Number.MAX_SAFE_INTEGER + 1) and assert safeParse(...) fails; include a short comment that timezone is handled via epoch milliseconds and add the note "Timestamps outside the range [Date.now() - 1 year, Date.now() + 1 year] are treated as malformed; adjust bounds based on business requirements." to document the enforced bounds.



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 225 to 226
Type: nitpick

Prompt for AI Agent:
In backend/src/lib/security/ErrorSanitizer.ts around lines 53-59 (and also apply at line 82), add a Zod schema for ErrorContext and validate incoming context at runtime: import z from 'zod' and define ErrorContextSchema = z.object({ requestId: z.string(), userId: z.string().optional(), endpoint: z.string(), method: z.string(), userAgent: z.string().optional(), ip: z.string(), additionalData: z.record(z.unknown()) }).strict(); then in sanitize(error, context?) call const validatedContext = context ? (() => { try { return ErrorContextSchema.parse(context) } catch (e) { logger.warn('ErrorContext validation failed', e); return convertParseErrorToSanitizedErrorOrSetGenericContext(e) })() : undefined and use validatedContext (with proper typings) for the rest of the method instead of raw context; ensure parse failures are caught, logged at WARN, and converted to a safe SanitizedError or replaced with a generic context to avoid leaking PII.



============================================================================
File: backend/tests/unit/IdempotencySchemas.test.ts
Line: 9 to 10
Type: nitpick

Prompt for AI Agent:
In backend/tests/unit/IdempotencySchemas.test.ts around lines 9 to 10, the test file uses CommonJS require() in a .ts file; replace the require() calls with ES6 import statements (import { describe, it, expect } from '@jest/globals'; and import { IdempotencyCacheEntrySchema, IdempotencyCacheKeySchema } from '../../src/lib/validation/IdempotencySchemas';), update any module.exports/exports usage if present, and ensure tsconfig and eslint settings accept ES module syntax (or add / eslint-disable @typescript-eslint/no-var-requires / temporarily if config changes are not possible).



============================================================================
File: specs/018-technical-debt-cleanup/coderabbit-review-phase2.txt
Line: 281 to 282
Type: potential_issue

Prompt for AI Agent:
In backend/src/lib/validation/IdempotencySchemas.js around lines 37 to 42, the idempotency cache entry schema currently accepts arbitrary result data and extra fields; update the hash validation to the same 64-hex-char regex used by IdempotencyCacheKeySchema, replace z.unknown() for the result with a constrained zod object that explicitly lists only permissible non-sensitive fields (e.g., { transactionId: z.string(), status: z.enum([...]), timestamp: z.string().isoDate() } or similar), switch schema mode from .passthrough() to .strict() (or narrowly whitelist allowed extra fields), add a documentation comment above the schema stating what result types are permitted and explicitly forbidding storage of sensitive payment data per PCI‚ÄëDSS Requirement 3.2 (SAD, PANs, auth codes, customer IDs, amounts, tokens), and ensure code paths redact/strip any disallowed fields before persisting (only cache confirmed HTTP 2xx outcomes and log idempotency key usage), rather than attempting encryption.



Review completed ‚úî
